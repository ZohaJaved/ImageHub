{"ast":null,"code":"import { createAsyncThunk, createSlice, isFulfilled } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const uploadImage = createAsyncThunk('Images/uploadImage', async (args, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post('http://localhost:5000/uploadImage', args);\n    console.log(\"response\", response);\n    return (await response).data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const FetchImage = createAsyncThunk('Image/fetchImage', async (args, rejectWithValue) => {\n  try {\n    const response = axios.get('http://localhost:5000/FetchImage');\n    console.log(\"response from FetchImage\", response);\n    return await response.data;\n  } catch (error) {\n    rejectWithValue(error.response.message);\n  }\n});\nconst initialState = {\n  loading: false,\n  isSuccess: false,\n  message: '',\n  images: []\n};\nexport const imageSlicer = createSlice({\n  name: 'uploadImage',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(uploadImage.pending, (state, action) => {\n      state.loading = true;\n    }).addCase(uploadImage.fulfilled, (state, action) => {\n      state.loading = false;\n      state.isSuccess = true;\n    }).addCase(uploadImage.rejected, (state, action) => {\n      state.loading = false;\n      state.isSuccess = false;\n      state.message = action.error.message;\n    });\n    builder.addCase(FetchImage.pending, (state, action) => {\n      state.loading = true;\n    }).addCase(FetchImage.fulfilled, (state, action) => {\n      state.isSuccess = true;\n    });\n  }\n});\nexport default imageSlicer.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","isFulfilled","axios","uploadImage","args","rejectWithValue","response","post","console","log","data","error","message","FetchImage","get","initialState","loading","isSuccess","images","imageSlicer","name","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","rejected","reducer"],"sources":["D:/ImageHub/client/src/state/slicer.js"],"sourcesContent":["import {createAsyncThunk,createSlice, isFulfilled} from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nexport const uploadImage=createAsyncThunk('Images/uploadImage',\r\n    async(args,{rejectWithValue})=>{\r\n        try{\r\n            const response=await axios.post('http://localhost:5000/uploadImage',args)\r\n            console.log(\"response\",response);\r\n            return (await response).data\r\n        }\r\n        catch(error){\r\n            return rejectWithValue(error.message)\r\n        }\r\n    })\r\n\r\nexport const FetchImage=createAsyncThunk('Image/fetchImage',\r\n    async(args,rejectWithValue)=>{\r\n        try{\r\n            const response=axios.get('http://localhost:5000/FetchImage')\r\n            console.log(\"response from FetchImage\",response)\r\n            return await response.data\r\n        }\r\n        catch(error){\r\n            rejectWithValue(error.response.message)\r\n        }\r\n    }\r\n)\r\n\r\n    const initialState={\r\n        loading:false,\r\n        isSuccess:false,\r\n        message:'',\r\n        images:[]\r\n    }\r\n\r\n    export const imageSlicer=createSlice({\r\n        name:'uploadImage',\r\n        initialState,\r\n        reducers:{},\r\n        extraReducers:(builder)=>{\r\n            builder\r\n            .addCase(uploadImage.pending,(state,action)=>{\r\n                state.loading=true;\r\n            })\r\n            .addCase(uploadImage.fulfilled,(state,action)=>{\r\n                state.loading=false;\r\n                state.isSuccess=true;\r\n            })\r\n            .addCase(uploadImage.rejected,(state,action)=>{\r\n                state.loading=false;\r\n                state.isSuccess=false;\r\n                state.message=action.error.message\r\n            })\r\n            builder\r\n            .addCase(FetchImage.pending,(state,action)=>{\r\n                state.loading=true;\r\n            })\r\n            .addCase(FetchImage.fulfilled,(state,action)=>{\r\n                state.isSuccess=true;\r\n            })\r\n        }\r\n    })\r\n    export default imageSlicer.reducer\r\n\r\n"],"mappings":"AAAA,SAAQA,gBAAgB,EAACC,WAAW,EAAEC,WAAW,QAAO,kBAAkB;AAC1E,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,WAAW,GAACJ,gBAAgB,CAAC,oBAAoB,EAC1D,OAAMK,IAAI,EAAC;EAACC;AAAe,CAAC,KAAG;EAC3B,IAAG;IACC,MAAMC,QAAQ,GAAC,MAAMJ,KAAK,CAACK,IAAI,CAAC,mCAAmC,EAACH,IAAI,CAAC;IACzEI,OAAO,CAACC,GAAG,CAAC,UAAU,EAACH,QAAQ,CAAC;IAChC,OAAO,CAAC,MAAMA,QAAQ,EAAEI,IAAI;EAChC,CAAC,CACD,OAAMC,KAAK,EAAC;IACR,OAAON,eAAe,CAACM,KAAK,CAACC,OAAO,CAAC;EACzC;AACJ,CAAC,CAAC;AAEN,OAAO,MAAMC,UAAU,GAACd,gBAAgB,CAAC,kBAAkB,EACvD,OAAMK,IAAI,EAACC,eAAe,KAAG;EACzB,IAAG;IACC,MAAMC,QAAQ,GAACJ,KAAK,CAACY,GAAG,CAAC,kCAAkC,CAAC;IAC5DN,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAACH,QAAQ,CAAC;IAChD,OAAO,MAAMA,QAAQ,CAACI,IAAI;EAC9B,CAAC,CACD,OAAMC,KAAK,EAAC;IACRN,eAAe,CAACM,KAAK,CAACL,QAAQ,CAACM,OAAO,CAAC;EAC3C;AACJ,CACJ,CAAC;AAEG,MAAMG,YAAY,GAAC;EACfC,OAAO,EAAC,KAAK;EACbC,SAAS,EAAC,KAAK;EACfL,OAAO,EAAC,EAAE;EACVM,MAAM,EAAC;AACX,CAAC;AAED,OAAO,MAAMC,WAAW,GAACnB,WAAW,CAAC;EACjCoB,IAAI,EAAC,aAAa;EAClBL,YAAY;EACZM,QAAQ,EAAC,CAAC,CAAC;EACXC,aAAa,EAAEC,OAAO,IAAG;IACrBA,OAAO,CACNC,OAAO,CAACrB,WAAW,CAACsB,OAAO,EAAC,CAACC,KAAK,EAACC,MAAM,KAAG;MACzCD,KAAK,CAACV,OAAO,GAAC,IAAI;IACtB,CAAC,CAAC,CACDQ,OAAO,CAACrB,WAAW,CAACyB,SAAS,EAAC,CAACF,KAAK,EAACC,MAAM,KAAG;MAC3CD,KAAK,CAACV,OAAO,GAAC,KAAK;MACnBU,KAAK,CAACT,SAAS,GAAC,IAAI;IACxB,CAAC,CAAC,CACDO,OAAO,CAACrB,WAAW,CAAC0B,QAAQ,EAAC,CAACH,KAAK,EAACC,MAAM,KAAG;MAC1CD,KAAK,CAACV,OAAO,GAAC,KAAK;MACnBU,KAAK,CAACT,SAAS,GAAC,KAAK;MACrBS,KAAK,CAACd,OAAO,GAACe,MAAM,CAAChB,KAAK,CAACC,OAAO;IACtC,CAAC,CAAC;IACFW,OAAO,CACNC,OAAO,CAACX,UAAU,CAACY,OAAO,EAAC,CAACC,KAAK,EAACC,MAAM,KAAG;MACxCD,KAAK,CAACV,OAAO,GAAC,IAAI;IACtB,CAAC,CAAC,CACDQ,OAAO,CAACX,UAAU,CAACe,SAAS,EAAC,CAACF,KAAK,EAACC,MAAM,KAAG;MAC1CD,KAAK,CAACT,SAAS,GAAC,IAAI;IACxB,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AACF,eAAeE,WAAW,CAACW,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}